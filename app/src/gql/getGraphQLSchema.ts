import { mergeSchemas } from "@graphql-tools/schema";
import { Logger } from "@shared/developmentLogger";
import { writeFileSync } from "fs";
import { printSchema } from "graphql";
import { GraphQLSchema } from "graphql/type";
import {
  getAutogeneratedGraphQLSchema,
  IOptionalAutogeneratedGraphQLSchemaProps,
} from "./getAutogeneratedGraphQLSchema";
import { getTypeGraphQLSchema } from "./typegraphql/schema";

const logger = new Logger("GQL Schema");

const getGraphQLSchema = async (props: IOptionalAutogeneratedGraphQLSchemaProps) => {
  const schemas: GraphQLSchema[] = [];

  if (props.api && props.connection) {
    schemas.push(
      await getAutogeneratedGraphQLSchema({
        api: props.api,
        connection: props.connection,
      }),
    );
  }
  schemas.push(await getTypeGraphQLSchema());

  const schema = mergeSchemas({
    schemas,
  });

  // Write the GraphQL schema to file.
  try {
    logger.debug("About to write GraphQL schema to disk.");
    writeFileSync("schema.gql", printSchema(schema), { encoding: "utf-8" });
  } catch {
    logger.warn(
      "Failed to write GraphQL schema to disk.",
      "This is required for local development for use with Relay.",
    );
  }

  return schema;
};

export { getGraphQLSchema };
