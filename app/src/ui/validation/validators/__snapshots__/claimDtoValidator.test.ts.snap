// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`claimDtoValidator() With en-GB i18n with claimState as default when claim is a final claim and is a Ktp competition with not required IAR and not received valid IAR status with documents as KTP competition 1`] = `null`;

exports[`claimDtoValidator() With en-GB i18n with claimState as default when claim is a final claim and is a Ktp competition with not required IAR and not received valid IAR status without documents as KTP competition 1`] = `null`;

exports[`claimDtoValidator() With en-GB i18n with claimState as default when claim is a final claim and is a Ktp competition with required IAR and invalid IAR status with documents as KTP competition 1`] = `"You must upload a schedule 3 before you can submit this claim."`;

exports[`claimDtoValidator() With en-GB i18n with claimState as default when claim is a final claim and is a Ktp competition with required IAR and invalid IAR status without documents as KTP competition 1`] = `"You must upload a schedule 3 before you can submit this claim."`;

exports[`claimDtoValidator() With en-GB i18n with claimState as default when claim is a final claim and is a Ktp competition with required IAR and valid IAR status with documents as KTP competition 1`] = `"You must upload a schedule 3 before you can submit this claim."`;

exports[`claimDtoValidator() With en-GB i18n with claimState as default when claim is a final claim and is a Ktp competition with required IAR and valid IAR status without documents as KTP competition 1`] = `"You must upload a schedule 3 before you can submit this claim."`;

exports[`claimDtoValidator() With en-GB i18n with claimState as default when claim is a final claim non-ktp competition type when IAR is not required when IAR + PCF status is not received 1`] = `"You must upload a project completion form before you can submit this claim."`;

exports[`claimDtoValidator() With en-GB i18n with claimState as default when claim is a final claim non-ktp competition type when IAR is not required when IAR is not received and PCF status is received 1`] = `"You must upload a project completion form before you can submit this claim."`;

exports[`claimDtoValidator() With en-GB i18n with claimState as default when claim is a final claim non-ktp competition type when IAR is not required when IAR is received and PCF status is not received 1`] = `"You must upload a project completion form before you can submit this claim."`;

exports[`claimDtoValidator() With en-GB i18n with claimState as default when claim is a final claim non-ktp competition type when pcf status is invalid 1`] = `"You must upload a project completion form before you can submit this claim."`;

exports[`claimDtoValidator() With en-GB i18n with claimState as default when claim is a final claim non-ktp competition type when pcf status is valid 1`] = `"You must upload a project completion form before you can submit this claim."`;

exports[`claimDtoValidator() With en-GB i18n with claimState as default when claim not a final claim with non required IAR and a valid IAR status with documents as non-KTP competition 1`] = `null`;

exports[`claimDtoValidator() With en-GB i18n with claimState as default when claim not a final claim with non required IAR and a valid IAR status without documents as non-KTP competition 1`] = `null`;

exports[`claimDtoValidator() With en-GB i18n with claimState as default when claim not a final claim with required IAR and invalid IAR status with documents as KTP competition 1`] = `"You must upload a schedule 3 before you can submit this claim."`;

exports[`claimDtoValidator() With en-GB i18n with claimState as default when claim not a final claim with required IAR and invalid IAR status with documents as non-KTP competition 1`] = `"You must upload an independent accountant's report before you can submit this claim."`;

exports[`claimDtoValidator() With en-GB i18n with claimState as default when claim not a final claim with required IAR and invalid IAR status without documents as KTP competition 1`] = `"You must upload a schedule 3 before you can submit this claim."`;

exports[`claimDtoValidator() With en-GB i18n with claimState as default when claim not a final claim with required IAR and invalid IAR status without documents as non-KTP competition 1`] = `"You must upload an independent accountant's report before you can submit this claim."`;

exports[`claimDtoValidator() With en-GB i18n with claimState as default when claim not a final claim with required IAR and valid IAR status with documents as KTP competition 1`] = `"You must upload a schedule 3 before you can submit this claim."`;

exports[`claimDtoValidator() With en-GB i18n with claimState as default when claim not a final claim with required IAR and valid IAR status with documents as non-KTP competition 1`] = `"You must upload an independent accountant's report before you can submit this claim."`;

exports[`claimDtoValidator() With en-GB i18n with claimState as default when claim not a final claim with required IAR and valid IAR status without documents as KTP competition 1`] = `"You must upload a schedule 3 before you can submit this claim."`;

exports[`claimDtoValidator() With en-GB i18n with claimState as default when claim not a final claim with required IAR and valid IAR status without documents as non-KTP competition 1`] = `"You must upload an independent accountant's report before you can submit this claim."`;

exports[`claimDtoValidator() With en-GB i18n with claimState when status is awaiting IAR when not the final claim when IAR required with IAR status is valid 1`] = `null`;

exports[`claimDtoValidator() With en-GB i18n with claimState when status is awaiting IAR when not the final claim when IAR required with IAR statuses is invalid when a KTP project 1`] = `"You must upload a schedule 3 before you can submit this claim."`;

exports[`claimDtoValidator() With en-GB i18n with claimState when status is awaiting IAR when not the final claim when IAR required with IAR statuses is invalid when not KTP project 1`] = `"You must upload an independent accountant's report before you can submit this claim."`;

exports[`claimDtoValidator() With en-GB i18n with claimState when status is awaiting IAR when the final claim when KTP with IAR not required when iar and pcf statuses are invalid 1`] = `null`;

exports[`claimDtoValidator() With en-GB i18n with claimState when status is awaiting IAR when the final claim when KTP with IAR not required when iar and pcf statuses are valid 1`] = `null`;

exports[`claimDtoValidator() With en-GB i18n with claimState when status is awaiting IAR when the final claim when KTP with IAR not required when iar status is valid and not pcf 1`] = `null`;

exports[`claimDtoValidator() With en-GB i18n with claimState when status is awaiting IAR when the final claim when KTP with IAR not required when pcf status is valid and not iar 1`] = `null`;

exports[`claimDtoValidator() With en-GB i18n with claimState when status is awaiting IAR when the final claim when KTP with IAR required when iar and pcf statuses are invalid 1`] = `"You must upload a schedule 3 before you can submit this claim."`;

exports[`claimDtoValidator() With en-GB i18n with claimState when status is awaiting IAR when the final claim when KTP with IAR required when iar and pcf statuses are valid 1`] = `null`;

exports[`claimDtoValidator() With en-GB i18n with claimState when status is awaiting IAR when the final claim when KTP with IAR required when iar status is valid and not pcf 1`] = `null`;

exports[`claimDtoValidator() With en-GB i18n with claimState when status is awaiting IAR when the final claim when KTP with IAR required when pcf status is valid and not iar 1`] = `"You must upload a schedule 3 before you can submit this claim."`;

exports[`claimDtoValidator() With en-GB i18n with claimState when status is awaiting IAR when the final claim when ktp project competition when iar required and status when invalid 1`] = `"You must upload a schedule 3 before you can submit this claim."`;

exports[`claimDtoValidator() With en-GB i18n with claimState when status is awaiting IAR when the final claim when ktp project competition when iar required and status when valid 1`] = `null`;

exports[`claimDtoValidator() With en-GB i18n with claimState when status is awaiting IAR when the final claim when not KTP with non required IAR with IAR and PCF received 1`] = `null`;

exports[`claimDtoValidator() With en-GB i18n with claimState when status is awaiting IAR when the final claim when not KTP with non required IAR with IAR and PCF statuses are not received 1`] = `"You must upload a project completion form before you can submit this claim."`;

exports[`claimDtoValidator() With en-GB i18n with claimState when status is awaiting IAR when the final claim when not KTP with non required IAR with IAR received but not PCF 1`] = `"You must upload a project completion form before you can submit this claim."`;

exports[`claimDtoValidator() With en-GB i18n with claimState when status is awaiting IAR when the final claim when not KTP with non required IAR with PCF received but not IAR 1`] = `null`;

exports[`claimDtoValidator() With en-GB i18n with claimState when status is awaiting IAR when the final claim when not KTP with required IAR with IAR and PCF statuses are invalid 1`] = `"You must upload an independent accountant's report and a project completion form before you can submit this claim."`;

exports[`claimDtoValidator() With en-GB i18n with claimState when status is awaiting IAR when the final claim when not KTP with required IAR with IAR and PCF statuses are valid 1`] = `null`;

exports[`claimDtoValidator() With en-GB i18n with claimState when status is awaiting IAR when the final claim when not KTP with required IAR with IAR status is valid and not PCF 1`] = `"You must upload a project completion form before you can submit this claim."`;

exports[`claimDtoValidator() With en-GB i18n with claimState when status is awaiting IAR when the final claim when not KTP with required IAR with PCF status is valid and not iar 1`] = `"You must upload an independent accountant's report before you can submit this claim."`;

exports[`claimDtoValidator() With en-GB i18n with comments with correct claim status with an incorrect status and valid original status but no comments 1`] = `null`;

exports[`claimDtoValidator() With en-GB i18n with comments with correct claim status with correct status and original status 1`] = `null`;

exports[`claimDtoValidator() With en-GB i18n with comments with correct claim status with correct status and original status but no comments 1`] = `"Comments are required if querying a claim."`;

exports[`claimDtoValidator() With en-GB i18n with comments with correct claim status with correct status and original status but no comments 2`] = `null`;

exports[`claimDtoValidator() With en-GB i18n with comments with correct length validation with an exceeding max comment length 1`] = `"Comments must be a maximum of 1000 characters"`;

exports[`claimDtoValidator() With en-GB i18n with comments with correct length validation with max comment length of 1000 1`] = `null`;

exports[`claimDtoValidator() With en-GB i18n with status when invalid claim status when Approved 1`] = `"The claim status 'Approved' is not permitted to continue."`;

exports[`claimDtoValidator() With en-GB i18n with status when invalid claim status when New 1`] = `"The claim status 'New' is not permitted to continue."`;

exports[`claimDtoValidator() With en-GB i18n with status when invalid claim status when Not used 1`] = `"The claim status 'Not used' is not permitted to continue."`;

exports[`claimDtoValidator() With en-GB i18n with status when invalid claim status when Paid 1`] = `"The claim status 'Paid' is not permitted to continue."`;

exports[`claimDtoValidator() With en-GB i18n with status when invalid claim status when Payment Requested 1`] = `"The claim status 'Payment Requested' is not permitted to continue."`;

exports[`claimDtoValidator() With en-GB i18n with status when invalid claim status when Unknown 1`] = `"The claim status '' is not permitted to continue."`;

exports[`claimDtoValidator() With en-GB i18n with totalCosts when all total costs accumulate to a negative total 1`] = `"You must reduce your claim to ensure the remaining eligible costs are zero or higher."`;

exports[`claimDtoValidator() With en-GB i18n with totalCosts when total costs are negative 1`] = `"You must reduce your claim to ensure the remaining eligible costs are zero or higher."`;

exports[`claimDtoValidator() With no i18n with claimState as default when claim is a final claim and is a Ktp competition with not required IAR and not received valid IAR status with documents as KTP competition 1`] = `null`;

exports[`claimDtoValidator() With no i18n with claimState as default when claim is a final claim and is a Ktp competition with not required IAR and not received valid IAR status without documents as KTP competition 1`] = `null`;

exports[`claimDtoValidator() With no i18n with claimState as default when claim is a final claim and is a Ktp competition with required IAR and invalid IAR status with documents as KTP competition 1`] = `"validation.claimDtoValidator.iarStatusInvalid"`;

exports[`claimDtoValidator() With no i18n with claimState as default when claim is a final claim and is a Ktp competition with required IAR and invalid IAR status without documents as KTP competition 1`] = `"validation.claimDtoValidator.iarStatusInvalid"`;

exports[`claimDtoValidator() With no i18n with claimState as default when claim is a final claim and is a Ktp competition with required IAR and valid IAR status with documents as KTP competition 1`] = `"validation.claimDtoValidator.iarStatusInvalid"`;

exports[`claimDtoValidator() With no i18n with claimState as default when claim is a final claim and is a Ktp competition with required IAR and valid IAR status without documents as KTP competition 1`] = `"validation.claimDtoValidator.iarStatusInvalid"`;

exports[`claimDtoValidator() With no i18n with claimState as default when claim is a final claim non-ktp competition type when IAR is not required when IAR + PCF status is not received 1`] = `"validation.claimDtoValidator.pcfStatusInvalid"`;

exports[`claimDtoValidator() With no i18n with claimState as default when claim is a final claim non-ktp competition type when IAR is not required when IAR is not received and PCF status is received 1`] = `"validation.claimDtoValidator.pcfStatusInvalid"`;

exports[`claimDtoValidator() With no i18n with claimState as default when claim is a final claim non-ktp competition type when IAR is not required when IAR is received and PCF status is not received 1`] = `"validation.claimDtoValidator.pcfStatusInvalid"`;

exports[`claimDtoValidator() With no i18n with claimState as default when claim is a final claim non-ktp competition type when pcf status is invalid 1`] = `"validation.claimDtoValidator.pcfStatusInvalid"`;

exports[`claimDtoValidator() With no i18n with claimState as default when claim is a final claim non-ktp competition type when pcf status is valid 1`] = `"validation.claimDtoValidator.pcfStatusInvalid"`;

exports[`claimDtoValidator() With no i18n with claimState as default when claim not a final claim with non required IAR and a valid IAR status with documents as non-KTP competition 1`] = `null`;

exports[`claimDtoValidator() With no i18n with claimState as default when claim not a final claim with non required IAR and a valid IAR status without documents as non-KTP competition 1`] = `null`;

exports[`claimDtoValidator() With no i18n with claimState as default when claim not a final claim with required IAR and invalid IAR status with documents as KTP competition 1`] = `"validation.claimDtoValidator.iarStatusInvalid"`;

exports[`claimDtoValidator() With no i18n with claimState as default when claim not a final claim with required IAR and invalid IAR status with documents as non-KTP competition 1`] = `"validation.claimDtoValidator.iarStatusInvalid"`;

exports[`claimDtoValidator() With no i18n with claimState as default when claim not a final claim with required IAR and invalid IAR status without documents as KTP competition 1`] = `"validation.claimDtoValidator.iarStatusInvalid"`;

exports[`claimDtoValidator() With no i18n with claimState as default when claim not a final claim with required IAR and invalid IAR status without documents as non-KTP competition 1`] = `"validation.claimDtoValidator.iarStatusInvalid"`;

exports[`claimDtoValidator() With no i18n with claimState as default when claim not a final claim with required IAR and valid IAR status with documents as KTP competition 1`] = `"validation.claimDtoValidator.iarStatusInvalid"`;

exports[`claimDtoValidator() With no i18n with claimState as default when claim not a final claim with required IAR and valid IAR status with documents as non-KTP competition 1`] = `"validation.claimDtoValidator.iarStatusInvalid"`;

exports[`claimDtoValidator() With no i18n with claimState as default when claim not a final claim with required IAR and valid IAR status without documents as KTP competition 1`] = `"validation.claimDtoValidator.iarStatusInvalid"`;

exports[`claimDtoValidator() With no i18n with claimState as default when claim not a final claim with required IAR and valid IAR status without documents as non-KTP competition 1`] = `"validation.claimDtoValidator.iarStatusInvalid"`;

exports[`claimDtoValidator() With no i18n with claimState when status is awaiting IAR when not the final claim when IAR required with IAR status is valid 1`] = `null`;

exports[`claimDtoValidator() With no i18n with claimState when status is awaiting IAR when not the final claim when IAR required with IAR statuses is invalid when a KTP project 1`] = `"validation.claimDtoValidator.iarStatusInvalid"`;

exports[`claimDtoValidator() With no i18n with claimState when status is awaiting IAR when not the final claim when IAR required with IAR statuses is invalid when not KTP project 1`] = `"validation.claimDtoValidator.iarStatusInvalid"`;

exports[`claimDtoValidator() With no i18n with claimState when status is awaiting IAR when the final claim when KTP with IAR not required when iar and pcf statuses are invalid 1`] = `null`;

exports[`claimDtoValidator() With no i18n with claimState when status is awaiting IAR when the final claim when KTP with IAR not required when iar and pcf statuses are valid 1`] = `null`;

exports[`claimDtoValidator() With no i18n with claimState when status is awaiting IAR when the final claim when KTP with IAR not required when iar status is valid and not pcf 1`] = `null`;

exports[`claimDtoValidator() With no i18n with claimState when status is awaiting IAR when the final claim when KTP with IAR not required when pcf status is valid and not iar 1`] = `null`;

exports[`claimDtoValidator() With no i18n with claimState when status is awaiting IAR when the final claim when KTP with IAR required when iar and pcf statuses are invalid 1`] = `"validation.claimDtoValidator.iarStatusInvalid"`;

exports[`claimDtoValidator() With no i18n with claimState when status is awaiting IAR when the final claim when KTP with IAR required when iar and pcf statuses are valid 1`] = `null`;

exports[`claimDtoValidator() With no i18n with claimState when status is awaiting IAR when the final claim when KTP with IAR required when iar status is valid and not pcf 1`] = `null`;

exports[`claimDtoValidator() With no i18n with claimState when status is awaiting IAR when the final claim when KTP with IAR required when pcf status is valid and not iar 1`] = `"validation.claimDtoValidator.iarStatusInvalid"`;

exports[`claimDtoValidator() With no i18n with claimState when status is awaiting IAR when the final claim when ktp project competition when iar required and status when invalid 1`] = `"validation.claimDtoValidator.iarStatusInvalid"`;

exports[`claimDtoValidator() With no i18n with claimState when status is awaiting IAR when the final claim when ktp project competition when iar required and status when valid 1`] = `null`;

exports[`claimDtoValidator() With no i18n with claimState when status is awaiting IAR when the final claim when not KTP with non required IAR with IAR and PCF received 1`] = `null`;

exports[`claimDtoValidator() With no i18n with claimState when status is awaiting IAR when the final claim when not KTP with non required IAR with IAR and PCF statuses are not received 1`] = `"validation.claimDtoValidator.pcfStatusInvalid"`;

exports[`claimDtoValidator() With no i18n with claimState when status is awaiting IAR when the final claim when not KTP with non required IAR with IAR received but not PCF 1`] = `"validation.claimDtoValidator.pcfStatusInvalid"`;

exports[`claimDtoValidator() With no i18n with claimState when status is awaiting IAR when the final claim when not KTP with non required IAR with PCF received but not IAR 1`] = `null`;

exports[`claimDtoValidator() With no i18n with claimState when status is awaiting IAR when the final claim when not KTP with required IAR with IAR and PCF statuses are invalid 1`] = `"validation.claimDtoValidator.iarPcfStatusInvalid"`;

exports[`claimDtoValidator() With no i18n with claimState when status is awaiting IAR when the final claim when not KTP with required IAR with IAR and PCF statuses are valid 1`] = `null`;

exports[`claimDtoValidator() With no i18n with claimState when status is awaiting IAR when the final claim when not KTP with required IAR with IAR status is valid and not PCF 1`] = `"validation.claimDtoValidator.pcfStatusInvalid"`;

exports[`claimDtoValidator() With no i18n with claimState when status is awaiting IAR when the final claim when not KTP with required IAR with PCF status is valid and not iar 1`] = `"validation.claimDtoValidator.iarStatusInvalid"`;

exports[`claimDtoValidator() With no i18n with comments with correct claim status with an incorrect status and valid original status but no comments 1`] = `null`;

exports[`claimDtoValidator() With no i18n with comments with correct claim status with correct status and original status 1`] = `null`;

exports[`claimDtoValidator() With no i18n with comments with correct claim status with correct status and original status but no comments 1`] = `"validation.claimDtoValidator.queryingCommentRequired"`;

exports[`claimDtoValidator() With no i18n with comments with correct claim status with correct status and original status but no comments 2`] = `null`;

exports[`claimDtoValidator() With no i18n with comments with correct length validation with an exceeding max comment length 1`] = `"validation.claimDtoValidator.queryingCommentLength"`;

exports[`claimDtoValidator() With no i18n with comments with correct length validation with max comment length of 1000 1`] = `null`;

exports[`claimDtoValidator() With no i18n with status when invalid claim status when Approved 1`] = `"validation.claimDtoValidator.statusInvalid"`;

exports[`claimDtoValidator() With no i18n with status when invalid claim status when New 1`] = `"validation.claimDtoValidator.statusInvalid"`;

exports[`claimDtoValidator() With no i18n with status when invalid claim status when Not used 1`] = `"validation.claimDtoValidator.statusInvalid"`;

exports[`claimDtoValidator() With no i18n with status when invalid claim status when Paid 1`] = `"validation.claimDtoValidator.statusInvalid"`;

exports[`claimDtoValidator() With no i18n with status when invalid claim status when Payment Requested 1`] = `"validation.claimDtoValidator.statusInvalid"`;

exports[`claimDtoValidator() With no i18n with status when invalid claim status when Unknown 1`] = `"validation.claimDtoValidator.statusInvalid"`;

exports[`claimDtoValidator() With no i18n with totalCosts when all total costs accumulate to a negative total 1`] = `"validation.claimDtoValidator.totalCostsPositive"`;

exports[`claimDtoValidator() With no i18n with totalCosts when total costs are negative 1`] = `"validation.claimDtoValidator.totalCostsPositive"`;
